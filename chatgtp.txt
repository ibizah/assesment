To connect your React app to MongoDB and store data in the database, you'll need to follow a series of steps. I'll guide you through the process, including the necessary file creations and their contents.

Step 1: Set up a MongoDB Database
1. If you haven't already, install MongoDB on your machine or set up a MongoDB Atlas account if you prefer a cloud-based solution.
2. Create a new MongoDB database. Make a note of the connection string or the MongoDB Atlas URL. You'll need it later.

Step 2: Set up a Node.js Server
1. Create a new directory for your server files and navigate into it.
2. Initialize a new Node.js project by running `npm init` in your terminal. Follow the prompts to create the `package.json` file.
3. Install the required dependencies by running the following command:
   ```
   npm install express mongoose
   ```
4. Create a new file called `server.js` and open it in a code editor. Add the following code:

   ```javascript
   const express = require('express');
   const mongoose = require('mongoose');

   const app = express();

   // Connect to MongoDB
   mongoose.connect('mongodb://localhost:27017/your-database-name', {
     useNewUrlParser: true,
     useUnifiedTopology: true,
   })
     .then(() => {
       console.log('Connected to MongoDB');
     })
     .catch((error) => {
       console.error('Error connecting to MongoDB:', error);
     });

   // Start the server
   const port = 5000;
   app.listen(port, () => {
     console.log(`Server started on port ${port}`);
   });
   ```

   Replace `'your-database-name'` with the name of your MongoDB database or the connection string you obtained from MongoDB Atlas.

Step 3: Create a Model
1. Inside your server directory, create a new folder called `models`.
2. Create a new file inside the `models` folder called `exampleModel.js`. Open it in a code editor and add the following code:

   ```javascript
   const mongoose = require('mongoose');

   const exampleSchema = new mongoose.Schema({
     // Define your schema fields here
     field1: {
       type: String,
       required: true,
     },
     field2: {
       type: Number,
       required: true,
     },
   });

   const ExampleModel = mongoose.model('Example', exampleSchema);

   module.exports = ExampleModel;
   ```

   Modify the schema fields according to your data structure.

Step 4: Create API Endpoints
1. Inside your server directory, create a new folder called `routes`.
2. Create a new file inside the `routes` folder called `exampleRoutes.js`. Open it in a code editor and add the following code:

   ```javascript
   const express = require('express');
   const ExampleModel = require('../models/exampleModel');

   const router = express.Router();

   // Create a new example document
   router.post('/examples', async (req, res) => {
     try {
       const example = new ExampleModel(req.body);
       const savedExample = await example.save();
       res.status(201).json(savedExample);
     } catch (error) {
       res.status(500).json({ error: 'An error occurred' });
     }
   });

   // Get all examples
   router.get('/examples', async (req, res) => {
     try {
       const examples = await ExampleModel.find();
       res.json(examples);
     } catch (error) {
       res.status(500).json({ error: 'An error occurred' });
     }
   });

   module.exports = router;
   ```

Step 5:

 Integrate with React App
1. Open your React app codebase.
2. In the root of your React app, create a file called `.env` and add the following line:
   ```
   REACT_APP_SERVER_URL=http://localhost:5000
   ```
   Modify the URL if your server runs on a different port or hostname.
3. Install the `axios` library by running `npm install axios`.
4. In your React component where you want to connect to the server, add the following code:

   ```javascript
   import React, { useEffect, useState } from 'react';
   import axios from 'axios';

   const YourComponent = () => {
     const [examples, setExamples] = useState([]);

     useEffect(() => {
       // Fetch examples from the server
       axios
         .get(`${process.env.REACT_APP_SERVER_URL}/examples`)
         .then((response) => {
           setExamples(response.data);
         })
         .catch((error) => {
           console.error('Error fetching examples:', error);
         });
     }, []);

     // Add code to handle form submission and sending data to the server

     return (
       <div>
         {/* Render your data */}
         {examples.map((example) => (
           <div key={example._id}>
             <p>{example.field1}</p>
             <p>{example.field2}</p>
           </div>
         ))}
       </div>
     );
   };

   export default YourComponent;
   ```

   Modify the code according to your component structure and form handling needs.

That's it! You have now connected your React app to MongoDB and can store and retrieve data from the database. Remember to start your server by running `node server.js` in your terminal before accessing your React app.